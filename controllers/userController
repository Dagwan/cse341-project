//const User = require('../models/userModel');
const { ObjectId } = require('mongodb');
const mongodb = require('../db/db');

// Create a new user
const createUser = async (req, res) => {
  try {
// Extract user data from the request body
const userData = {
  name: req.body.name,
  email: req.body.email,
  username: req.body.username,
  password: req.body.password,
  registrationDate: req.body.registrationDate,
  role: req.body.role,
  status: req.body.status,
};


    // Insert the user into the MongoDB collection
    const result = await mongodb.getDb().db().collection('users').insertOne(userData);

    if (result.insertedId) {
      res.status(201).json({ success: 'User created successfully', userId: result.insertedId });
    } else {
      res.status(500).json({ error: 'An error occurred while creating the user.' });
    }
  } catch (error) {
    console.error('Error creating a user:', error);
    res.status(500).json({ error: 'An error occurred while creating the user.' });
  }
};

// Get all users
const getAllUsers = async (req, res) => {
  try {
    const users = await mongodb.getDb().db().collection('users').find().toArray();

    res.status(200).json(users);
  } catch (error) {
    console.error('Error fetching all users:', error);
    res.status(500).json({ error: 'An error occurred while fetching all users.' });
  }
};

// Get a single user by ID
const getSingleUser = async (req, res) => {
  try {
    const userId = req.params.id;

    if (!ObjectId.isValid(userId)) {
      return res.status(400).json({ error: 'Invalid user ID format.' });
    }

    const user = await mongodb
      .getDb()
      .db()
      .collection('users')
      .findOne({ _id: new ObjectId(userId) });

    if (!user) {
      return res.status(404).json({ error: 'user not found.' });
    }

    res.status(200).json(user);
  } catch (error) {
    console.error('Error fetching a single user by ID:', error);
    res.status(500).json({ error: 'An error occurred while fetching the user.' });
  }
};

// Update an existing user by ID
const updateUser = async (req, res) => {
  try {
    const userId = req.params.id;
    const userData = {
      name:req.body.name,
      title: req.body.title,
      description: req.body.description,
      dueDate: req.body.dueDate,
      priority: req.body.priority,
      completed: req.body.completed,
      createdBy: req.body.createdBy, 
      tags: req.body.tags,
    };

    if (!ObjectId.isValid(userId)) {
      return res.status(400).json({ error: 'Invalid user ID format.' });
    }

    const result = await mongodb
      .getDb()
      .db()
      .collection('users')
      .updateOne({ _id: new ObjectId(userId) }, { $set: userData });

    if (result.matchedCount > 0) {
      res.status(200).json({ success: 'User updated successfully' });
    } else {
      return res.status(404).json({ error: 'user not found.' });
    }
  } catch (error) {
    console.error('Error updating a user by ID:', error);
    res.status(500).json({ error: 'An error occurred while updating the user.' });
  }
};

// Delete a user by ID
const deleteUser = async (req, res) => {
  try {
    const userId = req.params.id;

    if (!ObjectId.isValid(userId)) {
      return res.status(400).json({ error: 'Invalid user ID format.' });
    }

    const result = await mongodb
      .getDb()
      .db()
      .collection('users')
      .deleteOne({ _id: new ObjectId(userId) });

    if (result.deletedCount > 0) {
      res.status(204).send();
    } else {
      return res.status(404).json({ error: 'user not found.' });
    }
  } catch (error) {
    console.error('Error deleting a user by ID:', error);
    res.status(500).json({ error: 'An error occurred while deleting the user.' });
  }
};

module.exports = {
  createUser,
  getAllUsers,
  getSingleUser,
  updateUser,
  deleteUser,
};
